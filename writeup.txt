De novo and reference-guided sequence assembly:

GCGCAGCTTTACATTATTGGTCCG
   GCGCAGCTTTACATTATTGGTCCG

ATTATTAGTG
   ATTAGTGGTC

#test_naive_single('TTTACATTATTAGTGGTCCGCGG', ['TTTACATTAT', 'ATTATTAGTG', 'ATTATTAGTG', 'ATTAGTGGTC', 'TTTACATTAT', 'CATTATTAGT', 'TAGTGGTCCG', 'TAGTGGTCCG', 'ATTAGTGGTC', 'ATTAGTGGTC', 'ATTAGTGGTC', 'TTTACATTAT', 'TTACATTATT', 'TTACATTATT'])


CGACAGGGATATCAATCCTCTCTTTATCTG
  AATCCTCTCTT
  *      * *

    AGGGATATCAA



Scoring by sum of square contiguous regions
ADADADADAD
AGAGAGAGAG
1+1+1+1+1=5

ADADADADAD
ADADAZZZZZ
5^2 = 25

ADADADADAD
ADZZADZZAZ
2^2+2^2+1 = 9

ADADADADADADADADADAD
ADADADADADZDADADADAD
181

Idea: use this sum-of-square scoring in the Needleman-Wunsch algorithm
Also, try gunzip compression ratio entropy for scoring as well
    Although I have no idea how that would work for 2 strings...

ADADADADAD
AGAGAGAGAG
->*10 = 38B
AADGAADGAADGAADGAADG*10 = 34B

ADADADADAD
ADADAZZZZZ
->*10 = 39B
AADDAADDAADZAZDZAZDZ*10 = 40B

ADADADADAD
ADZZADZZAZ
->*10 = 41B
AADDAZDZAADDAZDZAADZ*10 = 42B

ADADADADAD
ADADADADAD
->*10 = 34B
AADDAADDAADDAADDAADD*10 = 34B


